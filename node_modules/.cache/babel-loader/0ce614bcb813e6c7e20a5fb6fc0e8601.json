{"ast":null,"code":"var _jsxFileName = \"/Users/ntimrova/Documents/numerical methods/numercal-methods-lab-2/src/components/Graph.jsx\";\n// import { Line } from 'react-chartjs-2';\n// import { Chart, registerables } from 'chart.js';\n// Chart.register(...registerables);\n\n// const Graph = ({ func, a, b }) => {\n\n//   const xValues = Array.from({ length: 1000 }, (_, i) => a + (i * (b - a)) / 999);\n//   const yValues = xValues.map(func);\n\n//   const data = {\n//     labels: xValues,\n//     datasets: [\n//       {\n//         label: 'f(x) = x^2 * cos(x)',\n//         data: yValues,\n//         fill: true,\n//         backgroundColor: 'rgba(255, 0, 0, 0.5)', \n//         borderColor: 'black',\n//       },\n//     ],\n//   };\n\n//   const options = {\n//     responsive: true,\n//     maintainAspectRatio: false, \n//     scales: {\n//       x: { title: { display: true, text: 'x' } },\n//       y: { title: { display: true, text: 'f(x)' } },\n//     },\n//   };\n\n//   return (\n//     <div style={{ width: '1470px', height: '330px' }}> {/* Задаємо розмір контейнера */}\n//       <Line data={data} options={options} />\n//     </div>\n//   );\n// };\n\n// export default Graph;\n// Graph.js\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst Graph = _ref => {\n  let {\n    func,\n    a,\n    b,\n    n = 10,\n    method = 'rectangle'\n  } = _ref;\n  const h = (b - a) / n;\n  const xValues = Array.from({\n    length: 1000\n  }, (_, i) => a + i * (b - a) / 999);\n  const yValues = xValues.map(func);\n  const yMax = Math.max(...yValues) * 1.1;\n  let data,\n    belowPoints = [],\n    abovePoints = [];\n  if (method === 'rectangle') {\n    const rectangleX = Array.from({\n      length: n\n    }, (_, i) => a + i * h);\n    const rectangleY = rectangleX.map(func);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Rectangle Approximation',\n        type: 'bar',\n        data: rectangleY,\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        barThickness: h * 1000 / (b - a)\n      }]\n    };\n  } else if (method === 'trapezoidal') {\n    const trapezoidX = Array.from({\n      length: n + 1\n    }, (_, i) => a + i * h);\n    const trapezoidY = trapezoidX.map(func);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Trapezoidal Approximation',\n        type: 'line',\n        data: trapezoidY,\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\n        fill: true\n      }]\n    };\n  } else if (method === 'monteCarlo') {\n    const monteCarloPoints = Array.from({\n      length: 100\n    }, () => {\n      const x = a + Math.random() * (b - a);\n      const y = Math.random() * yMax;\n      const isBelow = y <= func(x);\n      return {\n        x,\n        y,\n        isBelow\n      };\n    });\n    belowPoints = monteCarloPoints.filter(p => p.isBelow);\n    abovePoints = monteCarloPoints.filter(p => !p.isBelow);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Points below curve',\n        data: belowPoints.map(p => ({\n          x: p.x,\n          y: p.y\n        })),\n        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n        pointRadius: 3,\n        type: 'scatter'\n      }, {\n        label: 'Points above curve',\n        data: abovePoints.map(p => ({\n          x: p.x,\n          y: p.y\n        })),\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        pointRadius: 3,\n        type: 'scatter'\n      }]\n    };\n  }\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'linear',\n        min: a,\n        max: b\n      },\n      y: {\n        min: 0,\n        max: yMax\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '300px',\n      height: '300px',\n      margin: '0 10px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","Line","Chart","registerables","jsxDEV","_jsxDEV","register","Graph","_ref","func","a","b","n","method","h","xValues","Array","from","length","_","i","yValues","map","yMax","Math","max","data","belowPoints","abovePoints","rectangleX","rectangleY","labels","datasets","label","borderColor","pointRadius","borderWidth","type","backgroundColor","barThickness","trapezoidX","trapezoidY","fill","monteCarloPoints","x","random","y","isBelow","filter","p","options","responsive","maintainAspectRatio","scales","min","style","width","height","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ntimrova/Documents/numerical methods/numercal-methods-lab-2/src/components/Graph.jsx"],"sourcesContent":["\n// import { Line } from 'react-chartjs-2';\n// import { Chart, registerables } from 'chart.js';\n// Chart.register(...registerables);\n\n// const Graph = ({ func, a, b }) => {\n  \n//   const xValues = Array.from({ length: 1000 }, (_, i) => a + (i * (b - a)) / 999);\n//   const yValues = xValues.map(func);\n\n//   const data = {\n//     labels: xValues,\n//     datasets: [\n//       {\n//         label: 'f(x) = x^2 * cos(x)',\n//         data: yValues,\n//         fill: true,\n//         backgroundColor: 'rgba(255, 0, 0, 0.5)', \n//         borderColor: 'black',\n//       },\n//     ],\n//   };\n\n//   const options = {\n//     responsive: true,\n//     maintainAspectRatio: false, \n//     scales: {\n//       x: { title: { display: true, text: 'x' } },\n//       y: { title: { display: true, text: 'f(x)' } },\n//     },\n//   };\n\n//   return (\n//     <div style={{ width: '1470px', height: '330px' }}> {/* Задаємо розмір контейнера */}\n//       <Line data={data} options={options} />\n//     </div>\n//   );\n// };\n\n// export default Graph;\n// Graph.js\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst Graph = ({ func, a, b, n = 10, method = 'rectangle' }) => {\n  const h = (b - a) / n;\n  const xValues = Array.from({ length: 1000 }, (_, i) => a + (i * (b - a)) / 999);\n  const yValues = xValues.map(func);\n  const yMax = Math.max(...yValues) * 1.1;\n\n  let data, belowPoints = [], abovePoints = [];\n\n  if (method === 'rectangle') {\n    const rectangleX = Array.from({ length: n }, (_, i) => a + i * h);\n    const rectangleY = rectangleX.map(func);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Rectangle Approximation',\n          type: 'bar',\n          data: rectangleY,\n          backgroundColor: 'rgba(255, 0, 0, 0.5)',\n          barThickness: h * 1000 / (b - a),\n        },\n      ],\n    };\n  } else if (method === 'trapezoidal') {\n    const trapezoidX = Array.from({ length: n + 1 }, (_, i) => a + i * h);\n    const trapezoidY = trapezoidX.map(func);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Trapezoidal Approximation',\n          type: 'line',\n          data: trapezoidY,\n          backgroundColor: 'rgba(0, 0, 255, 0.2)',\n          fill: true,\n        },\n      ],\n    };\n  } else if (method === 'monteCarlo') {\n    const monteCarloPoints = Array.from({ length: 100 }, () => {\n      const x = a + Math.random() * (b - a);\n      const y = Math.random() * yMax;\n      const isBelow = y <= func(x);\n      return { x, y, isBelow };\n    });\n\n    belowPoints = monteCarloPoints.filter((p) => p.isBelow);\n    abovePoints = monteCarloPoints.filter((p) => !p.isBelow);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Points below curve',\n          data: belowPoints.map((p) => ({ x: p.x, y: p.y })),\n          backgroundColor: 'rgba(0, 255, 0, 0.5)',\n          pointRadius: 3,\n          type: 'scatter',\n        },\n        {\n          label: 'Points above curve',\n          data: abovePoints.map((p) => ({ x: p.x, y: p.y })),\n          backgroundColor: 'rgba(255, 0, 0, 0.5)',\n          pointRadius: 3,\n          type: 'scatter',\n        },\n      ],\n    };\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'linear',\n        min: a,\n        max: b,\n      },\n      y: {\n        min: 0,\n        max: yMax,\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '300px', height: '300px', margin: '0 10px' }}>\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}