{"ast":null,"code":"export const func = x => Math.pow(x, 2) * Math.cos(x);\nexport const func2 = x => 1 / Math.sqrt(0.5 * x + 1);\nexport const intervals = [10, 20, 50, 100, 1000, 100000000];\nexport const analyticValue = 0.372101;\nexport const analyticValue2 = 0.478397;\nexport function integrateRectangleMethod(func, a, b, n) {\n  const h = (b - a) / n;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const x = a + i * h;\n    sum += func(x);\n  }\n  return sum * h;\n}\n\n// Ця функція обчислює інтеграл за методом прямокутників:\n// h — довжина кожного підінтервалу.\n// У циклі додаємо значення func(x) для \n// 𝑥\n// x, що лежать на початку кожного підінтервалу.\n// Після циклу sum * h дає наближене значення інтегралу.\n// для кожного інтервалу використовується значення функції на його лівій межі, \n// що робить цей метод методом лівих прямокутників.\n\nexport function integrateTrapezoidalMethod(func, a, b, n) {\n  const h = (b - a) / n;\n  let sum = 0.5 * (func(a) + func(b));\n  for (let i = 1; i < n; i++) {\n    const x = a + i * h;\n    sum += func(x);\n  }\n  return sum * h;\n}\n\n// Ця функція обчислює інтеграл за методом трапецій:\n// Спочатку обчислює суму з половиною значення функції на краях інтервалу.\n// Додає значення функції в інших точках інтервалу.\n// Повертає значення інтегралу як sum * h.\n\nexport function integrateMonteCarloMethod(func, a, b, n) {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const x = a + Math.random() * (b - a);\n    sum += func(x);\n  }\n  return (b - a) / n * sum;\n}","map":{"version":3,"names":["func","x","Math","pow","cos","func2","sqrt","intervals","analyticValue","analyticValue2","integrateRectangleMethod","a","b","n","h","sum","i","integrateTrapezoidalMethod","integrateMonteCarloMethod","random"],"sources":["/Users/ntimrova/Documents/numerical methods/numercal-methods-lab-2/src/utils/methods.js"],"sourcesContent":["export const func = (x) => Math.pow(x, 2) * Math.cos(x);\nexport const func2 = (x) => 1 / Math.sqrt(0.5 * x + 1);\nexport const intervals = [ 10, 20, 50, 100, 1000, 100000000];\n\n\nexport const analyticValue = 0.372101;\nexport const analyticValue2 = 0.478397;\n\nexport function integrateRectangleMethod(func, a, b, n) {\n  const h = (b - a) / n;\n  let sum = 0;\n\n  for (let i = 0; i < n; i++) {\n    const x = a + i * h;\n    sum += func(x);\n  }\n\n  return sum * h;\n}\n\n// Ця функція обчислює інтеграл за методом прямокутників:\n// h — довжина кожного підінтервалу.\n// У циклі додаємо значення func(x) для \n// 𝑥\n// x, що лежать на початку кожного підінтервалу.\n// Після циклу sum * h дає наближене значення інтегралу.\n// для кожного інтервалу використовується значення функції на його лівій межі, \n// що робить цей метод методом лівих прямокутників.\n\nexport function integrateTrapezoidalMethod(func, a, b, n) {\n  const h = (b - a) / n;\n  let sum = 0.5 * (func(a) + func(b));  \n\n  for (let i = 1; i < n; i++) {\n    const x = a + i * h;\n    sum += func(x);\n  }\n\n  return sum * h;\n}\n\n// Ця функція обчислює інтеграл за методом трапецій:\n// Спочатку обчислює суму з половиною значення функції на краях інтервалу.\n// Додає значення функції в інших точках інтервалу.\n// Повертає значення інтегралу як sum * h.\n\nexport function integrateMonteCarloMethod(func, a, b, n) {\n  let sum = 0;\n\n  for (let i = 0; i < n; i++) {\n    const x = a + Math.random() * (b - a);  \n    sum += func(x);\n  }\n\n  return ((b - a) / n) * sum;\n}\n\n"],"mappings":"AAAA,OAAO,MAAMA,IAAI,GAAIC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACF,CAAC,EAAE,CAAC,CAAC,GAAGC,IAAI,CAACE,GAAG,CAACH,CAAC,CAAC;AACvD,OAAO,MAAMI,KAAK,GAAIJ,CAAC,IAAK,CAAC,GAAGC,IAAI,CAACI,IAAI,CAAC,GAAG,GAAGL,CAAC,GAAG,CAAC,CAAC;AACtD,OAAO,MAAMM,SAAS,GAAG,CAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,CAAC;AAG5D,OAAO,MAAMC,aAAa,GAAG,QAAQ;AACrC,OAAO,MAAMC,cAAc,GAAG,QAAQ;AAEtC,OAAO,SAASC,wBAAwBA,CAACV,IAAI,EAAEW,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACtD,MAAMC,CAAC,GAAG,CAACF,CAAC,GAAGD,CAAC,IAAIE,CAAC;EACrB,IAAIE,GAAG,GAAG,CAAC;EAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;IAC1B,MAAMf,CAAC,GAAGU,CAAC,GAAGK,CAAC,GAAGF,CAAC;IACnBC,GAAG,IAAIf,IAAI,CAACC,CAAC,CAAC;EAChB;EAEA,OAAOc,GAAG,GAAGD,CAAC;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,0BAA0BA,CAACjB,IAAI,EAAEW,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACxD,MAAMC,CAAC,GAAG,CAACF,CAAC,GAAGD,CAAC,IAAIE,CAAC;EACrB,IAAIE,GAAG,GAAG,GAAG,IAAIf,IAAI,CAACW,CAAC,CAAC,GAAGX,IAAI,CAACY,CAAC,CAAC,CAAC;EAEnC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;IAC1B,MAAMf,CAAC,GAAGU,CAAC,GAAGK,CAAC,GAAGF,CAAC;IACnBC,GAAG,IAAIf,IAAI,CAACC,CAAC,CAAC;EAChB;EAEA,OAAOc,GAAG,GAAGD,CAAC;AAChB;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,yBAAyBA,CAAClB,IAAI,EAAEW,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACvD,IAAIE,GAAG,GAAG,CAAC;EAEX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;IAC1B,MAAMf,CAAC,GAAGU,CAAC,GAAGT,IAAI,CAACiB,MAAM,CAAC,CAAC,IAAIP,CAAC,GAAGD,CAAC,CAAC;IACrCI,GAAG,IAAIf,IAAI,CAACC,CAAC,CAAC;EAChB;EAEA,OAAQ,CAACW,CAAC,GAAGD,CAAC,IAAIE,CAAC,GAAIE,GAAG;AAC5B"},"metadata":{},"sourceType":"module"}