{"ast":null,"code":"var _jsxFileName = \"/Users/ntimrova/Documents/numerical methods/numercal-methods-lab-2/src/components/Graph.jsx\";\n// Graph.js\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst Graph = _ref => {\n  let {\n    func,\n    a,\n    b,\n    n = 10,\n    method = 'rectangle'\n  } = _ref;\n  const h = (b - a) / n; // Ширина кожного інтервалу\n  const xValues = Array.from({\n    length: 1000\n  }, (_, i) => a + i * (b - a) / 999);\n  const yValues = xValues.map(func);\n  const yMax = Math.max(...yValues) * 1.1;\n  let data;\n  if (method === 'rectangle') {\n    const rectangleX = Array.from({\n      length: n\n    }, (_, i) => a + i * h);\n    const rectangleY = rectangleX.map(func);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Rectangle Approximation',\n        type: 'bar',\n        data: rectangleY.map((y, i) => ({\n          x: rectangleX[i] + h / 2,\n          y\n        })),\n        backgroundColor: 'rgba(255, 0, 0, 0.3)',\n        barThickness: h * 1000 / (b - a)\n      }, {\n        label: 'Rectangle Borders',\n        type: 'line',\n        data: rectangleX.flatMap((x, i) => [{\n          x,\n          y: 0\n        }, {\n          x,\n          y: rectangleY[i]\n        }, {\n          x: x + h,\n          y: rectangleY[i]\n        }, {\n          x: x + h,\n          y: 0\n        }]),\n        borderColor: 'red',\n        fill: false,\n        pointRadius: 0,\n        borderWidth: 1,\n        stepped: true\n      }]\n    };\n  } else if (method === 'trapezoidal') {\n    const trapezoidX = Array.from({\n      length: n + 1\n    }, (_, i) => a + i * h);\n    const trapezoidY = trapezoidX.map(func);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Trapezoidal Approximation',\n        type: 'line',\n        data: trapezoidX.map((x, i) => ({\n          x,\n          y: trapezoidY[i]\n        })),\n        borderColor: 'rgba(0, 0, 255, 0.5)',\n        fill: true,\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\n        pointRadius: 0,\n        borderWidth: 1\n      }, {\n        label: 'Trapezoid Borders',\n        type: 'line',\n        data: trapezoidX.map((x, i) => ({\n          x,\n          y: trapezoidY[i]\n        })),\n        borderColor: 'blue',\n        borderWidth: 1,\n        fill: false,\n        pointRadius: 0\n      }]\n    };\n  } else if (method === 'monteCarlo') {\n    const monteCarloPoints = Array.from({\n      length: 100\n    }, () => {\n      const x = a + Math.random() * (b - a);\n      const y = Math.random() * yMax;\n      const isBelow = y <= func(x);\n      return {\n        x,\n        y,\n        isBelow\n      };\n    });\n    const belowPoints = monteCarloPoints.filter(p => p.isBelow);\n    const abovePoints = monteCarloPoints.filter(p => !p.isBelow);\n    data = {\n      labels: xValues,\n      datasets: [{\n        label: 'f(x) = x^2 * cos(x)',\n        data: yValues,\n        borderColor: 'blue',\n        pointRadius: 0,\n        borderWidth: 2\n      }, {\n        label: 'Points below curve',\n        data: belowPoints.map(p => ({\n          x: p.x,\n          y: p.y\n        })),\n        backgroundColor: 'rgba(0, 255, 0, 0.5)',\n        pointRadius: 3,\n        type: 'scatter'\n      }, {\n        label: 'Points above curve',\n        data: abovePoints.map(p => ({\n          x: p.x,\n          y: p.y\n        })),\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        pointRadius: 3,\n        type: 'scatter'\n      }]\n    };\n  }\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'linear',\n        min: a,\n        max: b\n      },\n      y: {\n        min: 0,\n        max: yMax\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '300px',\n      height: '300px',\n      margin: '0 10px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","Line","Chart","registerables","jsxDEV","_jsxDEV","register","Graph","_ref","func","a","b","n","method","h","xValues","Array","from","length","_","i","yValues","map","yMax","Math","max","data","rectangleX","rectangleY","labels","datasets","label","borderColor","pointRadius","borderWidth","type","y","x","backgroundColor","barThickness","flatMap","fill","stepped","trapezoidX","trapezoidY","monteCarloPoints","random","isBelow","belowPoints","filter","p","abovePoints","options","responsive","maintainAspectRatio","scales","min","style","width","height","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ntimrova/Documents/numerical methods/numercal-methods-lab-2/src/components/Graph.jsx"],"sourcesContent":["// Graph.js\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst Graph = ({ func, a, b, n = 10, method = 'rectangle' }) => {\n  const h = (b - a) / n; // Ширина кожного інтервалу\n  const xValues = Array.from({ length: 1000 }, (_, i) => a + (i * (b - a)) / 999);\n  const yValues = xValues.map(func);\n  const yMax = Math.max(...yValues) * 1.1;\n\n  let data;\n\n  if (method === 'rectangle') {\n    const rectangleX = Array.from({ length: n }, (_, i) => a + i * h);\n    const rectangleY = rectangleX.map(func);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Rectangle Approximation',\n          type: 'bar',\n          data: rectangleY.map((y, i) => ({\n            x: rectangleX[i] + h / 2,\n            y,\n          })),\n          backgroundColor: 'rgba(255, 0, 0, 0.3)',\n          barThickness: h * 1000 / (b - a),\n        },\n        {\n          label: 'Rectangle Borders',\n          type: 'line',\n          data: rectangleX.flatMap((x, i) => [\n            { x, y: 0 },\n            { x, y: rectangleY[i] },\n            { x: x + h, y: rectangleY[i] },\n            { x: x + h, y: 0 },\n          ]),\n          borderColor: 'red',\n          fill: false,\n          pointRadius: 0,\n          borderWidth: 1,\n          stepped: true,\n        },\n      ],\n    };\n  } else if (method === 'trapezoidal') {\n    const trapezoidX = Array.from({ length: n + 1 }, (_, i) => a + i * h);\n    const trapezoidY = trapezoidX.map(func);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Trapezoidal Approximation',\n          type: 'line',\n          data: trapezoidX.map((x, i) => ({\n            x,\n            y: trapezoidY[i],\n          })),\n          borderColor: 'rgba(0, 0, 255, 0.5)',\n          fill: true,\n          backgroundColor: 'rgba(0, 0, 255, 0.2)',\n          pointRadius: 0,\n          borderWidth: 1,\n        },\n        {\n          label: 'Trapezoid Borders',\n          type: 'line',\n          data: trapezoidX.map((x, i) => ({\n            x,\n            y: trapezoidY[i],\n          })),\n          borderColor: 'blue',\n          borderWidth: 1,\n          fill: false,\n          pointRadius: 0,\n        },\n      ],\n    };\n  } else if (method === 'monteCarlo') {\n    const monteCarloPoints = Array.from({ length: 100 }, () => {\n      const x = a + Math.random() * (b - a);\n      const y = Math.random() * yMax;\n      const isBelow = y <= func(x);\n      return { x, y, isBelow };\n    });\n\n    const belowPoints = monteCarloPoints.filter((p) => p.isBelow);\n    const abovePoints = monteCarloPoints.filter((p) => !p.isBelow);\n\n    data = {\n      labels: xValues,\n      datasets: [\n        {\n          label: 'f(x) = x^2 * cos(x)',\n          data: yValues,\n          borderColor: 'blue',\n          pointRadius: 0,\n          borderWidth: 2,\n        },\n        {\n          label: 'Points below curve',\n          data: belowPoints.map((p) => ({ x: p.x, y: p.y })),\n          backgroundColor: 'rgba(0, 255, 0, 0.5)',\n          pointRadius: 3,\n          type: 'scatter',\n        },\n        {\n          label: 'Points above curve',\n          data: abovePoints.map((p) => ({ x: p.x, y: p.y })),\n          backgroundColor: 'rgba(255, 0, 0, 0.5)',\n          pointRadius: 3,\n          type: 'scatter',\n        },\n      ],\n    };\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        type: 'linear',\n        min: a,\n        max: b,\n      },\n      y: {\n        min: 0,\n        max: yMax,\n      },\n    },\n  };\n\n  return (\n    <div style={{ width: '300px', height: '300px', margin: '0 10px' }}>\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default Graph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}